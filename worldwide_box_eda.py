# -*- coding: utf-8 -*-
"""Worldwide Box Office Data Analysis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kLhx03pahTVerKFMZYck_xHABZyasN7_

<h2 align=center>  Worldwide Box Office Data Analysis with Plotly and Python</h2>

### Libraries
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
pd.set_option('max_columns', None)
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
plt.style.use('ggplot')
import datetime
import lightgbm as lgb
from scipy import stats
from scipy.sparse import hstack, csr_matrix
from sklearn.model_selection import train_test_split, KFold
from wordcloud import WordCloud
from collections import Counter
from nltk.corpus import stopwords
from nltk.util import ngrams
from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer
from sklearn.preprocessing import StandardScaler
import nltk
nltk.download('stopwords')
stop = set(stopwords.words('english'))
import os
import plotly.offline as py
py.init_notebook_mode(connected=True)
import plotly.graph_objs as go
import plotly.tools as tls
import xgboost as xgb
import lightgbm as lgb
from sklearn import model_selection
from sklearn.metrics import accuracy_score
import json
import ast
from urllib.request import urlopen
from PIL import Image
from sklearn.preprocessing import LabelEncoder
import time
from sklearn.metrics import mean_squared_error
from sklearn.linear_model import LinearRegression
from sklearn import linear_model

"""### Data Loading and Exploration"""

train = pd.read_csv('train.csv')
test = pd.read_csv('test.csv')

train.head()

test.head()

"""### Visualizing the Target Distribution"""

fig, ax = plt.subplots(figsize = (16, 6))
plt.subplot(1, 2, 1)
plt.hist(train['revenue']);
plt.title('Distribution of revenue');
plt.subplot(1, 2, 2)
plt.hist(np.log1p(train['revenue']));
plt.title('Distribution of log of revenue');

train['log_revenue'] = np.log1p(train['revenue'])

"""### Relationship between Film Revenue and Budget"""

fig, ax = plt.subplots(figsize = (16, 6))
plt.subplot(1, 2, 1)
plt.hist(train['budget']);
plt.title('Distribution of budget');
plt.subplot(1, 2, 2)
plt.hist(np.log1p(train['budget']));
plt.title('Distribution of log of budget');

plt.figure(figsize=(16, 8))
plt.subplot(1, 2, 1)
plt.scatter(train['budget'], train['revenue'])
plt.title('Revenue vs budget');
plt.subplot(1, 2, 2)
plt.scatter(np.log1p(train['budget']), train['log_revenue'])
plt.title('Log Revenue vs log budget');

train['log_budget'] = np.log1p(train['budget'])
test['log_budget'] = np.log1p(test['budget'])

"""### Does having an Official Homepage Affect Revenue?"""

train['homepage'].value_counts().head(10)

train['has_homepage'] = 0
train.loc[train['homepage'].isnull() == False, 'has_homepage'] = 1
test['has_homepage'] = 0
test.loc[test['homepage'].isnull() == False, 'has_homepage'] = 1

sns.catplot(x='has_homepage', y='revenue', data=train);
plt.title('Revenue for film with and without homepage');

"""### Distribution of Languages in Film"""

plt.figure(figsize=(16, 8))
plt.subplot(1, 2, 1)
sns.boxplot(x='original_language', y='revenue', data=train.loc[train['original_language'].isin(train['original_language'].value_counts().head(10).index)]);
plt.title('Mean revenue per language');
plt.subplot(1, 2, 2)
sns.boxplot(x='original_language', y='log_revenue', data=train.loc[train['original_language'].isin(train['original_language'].value_counts().head(10).index)]);
plt.title('Mean log revenue per language');

"""### Frequent Words in Film Titles and Discriptions"""

plt.figure(figsize = (12, 12))
text = ' '.join(train['original_title'].values)
wordcloud = WordCloud(max_font_size=None, background_color='white', width=1200, height=1000).generate(text)
plt.imshow(wordcloud)
plt.title('Top words in titles')
plt.axis("off")
plt.show()

plt.figure(figsize = (12, 12))
text = ' '.join(train['overview'].fillna('').values)
wordcloud = WordCloud(max_font_size=None, background_color='white', width=1200, height=1000).generate(text)
plt.imshow(wordcloud)
plt.title('Top words in overview')
plt.axis("off")
plt.show()

"""### Do Film Descriptions Impact Revenue?"""

!pip install eli5

import eli5

vectorizer = TfidfVectorizer(
            sublinear_tf=True,
            analyzer='word',
            token_pattern=r'\w{1,}',
            ngram_range=(1, 2),
            min_df=5)

overview_text = vectorizer.fit_transform(train['overview'].fillna(''))
linreg = LinearRegression()
linreg.fit(overview_text, train['log_revenue'])
eli5.show_weights(linreg, vec=vectorizer, top=20, feature_filter=lambda x: x != '<BIAS>')

print('Target value:', train['log_revenue'][1000])
eli5.show_prediction(linreg, doc=train['overview'].values[1000], vec=vectorizer)

"""###  Analyzing Movie Release Dates"""

test.loc[test['release_date'].isnull() == False, 'release_date'].head()

"""### Preprocessing Features"""

def fix_date(x):
  year = x.split('/')[2]
  if int(year) <= 19:
    return x[:-2] + '20' + year
  else:
    return x[:-2] + '19' + year

test.loc[test['release_date'].isnull() == True].head()

test.loc[test['release_date'].isnull() == True, 'release_date'] = '05/01/00'

train['release_date'] = train['release_date'].apply(lambda x: fix_date(x))

test['release_date'] = test['release_date'].apply(lambda x: fix_date(x))

"""###  Creating Features Based on Release Date"""

train['release_date'] = pd.to_datetime(train['release_date'])

test['release_date'] = pd.to_datetime(test['release_date'])

def process_date(df):
  date_parts = ['year', 'weekday', 'month', 'weekofyear', 'day', 'quarter']
  for part in date_parts:
    part_col = 'release_date' + '_' + part
    df[part_col] = getattr(df['release_date'].dt, part).astype(int)
  return df

train = process_date(train)
test = process_date(test)

"""### Visualizing the Number of Films Per Year with plotly"""

d1 = train['release_date_year'].value_counts().sort_index()
d1.head()

d2 = test['release_date_year'].value_counts().sort_index()

def configure_plotly_browser_state():
  import IPython
  display(IPython.core.display.HTML('''
        <script src="/static/components/requirejs/require.js"></script>
        <script>
          requirejs.config({
            paths: {
              base: '/static/base',
              plotly: 'https://cdn.plot.ly/plotly-latest.min.js?noext',
            },
          });
        </script>
        '''))

import plotly.offline as py
py.init_notebook_mode(connected=True)
configure_plotly_browser_state()
import plotly.graph_objs as go

data = [go.Scatter(x = d1.index, y=d1.values, name ='train' ),
        go.Scatter(x=d2.index, y=d2.values, name='test')]

layout = go.Layout(dict(title= "Number of Films per year", 
                        xaxis = dict(title = "Year"),
                        yaxis= dict(title="Count"),
                        ), legend = dict(orientation = 'v'))
py.iplot(dict(data=data, layout=layout))

"""### Visulaizing the Number of Films and Revenue Per Year with plotly"""

d1 = train['release_date_year'].value_counts().sort_index()
d2 = train.groupby(['release_date_year'])['revenue'].sum()

configure_plotly_browser_state()

data = [go.Scatter(x = d1.index, y=d1.values, name ='film count' ),
        go.Scatter(x=d2.index, y=d2.values, name='mean revenue', yaxis='y2')]

layout = go.Layout(dict(title= "Number of Films and Average revenue per year", 
                        xaxis = dict(title = "Year"),
                        yaxis= dict(title="Count"),
                        yaxis2 = dict(title='Average Revenue', overlaying ='y', side='right')), 
                        legend = dict(orientation = 'v'))
py.iplot(dict(data=data, layout=layout))



"""### Do Release Days Impact Revenue?"""

sns.catplot(x='release_date_weekday', y='revenue', data=train)
plt.title('Revenue of different days of the week')

"""### Visualizing Relationship between Runtime and Revenue"""

sns.scatterplot(x=train['runtime'].fillna(0)/60, y=train['revenue'])
plt.title("Runtime vs Revenue")

"""Thanks for checking out this notebook!

Hritik Bhandari
"""